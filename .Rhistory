q()
demo()
m3 <- matrix(1:12, nrow = 3)
m3
v1 <- 1:12
v1
v1[4:]
v1[4:10]
library('ggplot2')
install.packages(ggplot2)
install.packages('ggplot2')
library('ggplot2')
library(ggplot2)
y = rt(1000, df=1)
y
ggplot(y)
ggplot(data.frame(y), aes(sample=y))
sample = rnorm(10)
sample
sample = rnorm(10,5,6)
sample
mean(sample)
var(sample)
sqrt(var(sample))
sd(sample)
t.test(sample)
t.test(sample, mu=5)
# second sample a bigger one
sample2 = rnorm(20,10,2)
sample2
t.test(sample, sample2)
t.test(sample, sample2, var.equal = TRUE)
var.test(sample, sample2)
res = t.test(sample, sample2, var.equal = TRUE)
res$p.value
res
res$estimate
data = data.frame(method = rep(c('a','b','c'), each=10))
data
data = data.frame(method = rep(c('a','b','c'), each=10),score=c(85,86,88,75,78,94,98,79,71,80,91,92,93,85,87,84,82,88,95,96,79,78,88,94,92,85,83,85,82,81))
data
# analys of variance
model1 = aov(score ~ method, data=data)
model1
summary(model1)
bartlett.test(score ~ method, dat = data)
e03mean <- replicate( 10000, mean( rexp(3, 1/5) ) ) # generirame 3 sluchaini chilsla s eksponencialnost 1/5 i im namirame sumata i go povtarqme 10 000 pati
e07mean <- replicate( 10000, mean( rexp(7, 1/5) ) )
e10mean <- replicate( 10000, mean( rexp(10, 1/5) ) )
e30mean <- replicate( 10000, mean( rexp(30, 1/5) ) )
e90mean <- replicate( 10000, mean( rexp(90, 1/5) ) )
e200mean <- replicate( 10000, mean( rexp(200, 1/5) ) )
hist(e03mean, prob=T) #prob=T e za da chislata po y da davat 1
hist(e03mean) #prob=T e za da chislata po y da davat 1
hist(e03mean, prob=T) #prob=T e za da chislata po y da davat 1
hist(e03sum, prob=T) #prob=T e za da chislata po y da davat 1
u03mean <- replicate( 10000, mean( runif(3, 2, 8) ) ) # generirame 3 sluchaini chilsla s eksponencialnost 1/5 i im namirame sumata i go povtarqme 10 000 pati
u07mean <- replicate( 10000, mean( runif(7, 2, 8) ) )
u10mean <- replicate( 10000, mean( runif(10, 2, 8) ) )
u30mean <- replicate( 10000, mean( runif(30, 2, 8) ) )
u90mean <- replicate( 10000, mean( runif(90, 2, 8) ) )
u200mean <- replicate( 10000, mean( runif(200, 2, 8) ) )
hist(u03mean, prob=T) #prob=T e za da chislata po y da davat 1
hist(u07mean, prob=T)
hist(u10mean, prob=T)
hist(u30mean, prob=T)
hist(u90mean, prob=T)
hist(u200mean, prob=T)
curve( dt(x, df=10), from=-5, to=5, lwd=1.8, col="orange" )
curve( dnorm(x, 0, 1), add=T, lwd=1.8, lty="dashed", col="blue")
curve( dt(x, df=30), from=-5, to=5, lwd=1.8, col="orange" )
curve( dnorm(x, 0, 1), add=T, lwd=1.8, lty="dashed", col="blue")
curve( dt(x, df=90), from=-5, to=5, lwd=1.8, col="orange" )
curve( dnorm(x, 0, 1), add=T, lwd=1.8, lty="dashed", col="blue")
salk <- read.table("salk.txt")
setwd("~/Marchonio/git/Multivariate-Statistics-")
librar(UsingR)
library(UsingR)
library('UsingR')
library(UsingR)
library(UsingR)
install.packages("UsingR")
library(UsingR)
head(ToothGrowth)
bartlett.test(len~supp, dat=ToothGrowth)
library(car)
install.packages("car")
install.packages("car")
library(car)
levene.test(len~dose, dat=ToothGrowth)
leveneTest(len~dose, dat=ToothGrowth)
leveneTest(len~supp, dat=ToothGrowth)
leveneTest(len~as.factor(dose), dat=ToothGrowth)
bartlett.test(en~as.factor(dose), dat=ToothGrowth)
bartlett.test(len~as.factor(dose), dat=ToothGrowth)
var.test(len~supp, dat=ToothGrowth)
var.test(len~as.factor(dose), dat=ToothGrowth)
library(UsingR)
lik = function(z,param)
prod(dnorm(z, mean = param[1], sd=param[2]))
lik(0,c(0,1))
1/sqrt(2*pi)
z =rnorm(10)
z
# generate 10 random variables with normali distribution
z =rnorm(10)
z
lik(z,c(0,1))
library(maxLik)
install.packages("maxLik")
library(maxLik)
x= rnorm(100, mean =1 , sd =2)
# log likelihood function
logLikFun = function(param) {
mu = param[1]
sigma = param[2]
sum(dnorm(x, mean=mu, sd=sigme, log=TRUE))
}
# max log likelihood estimation
mle = maxLik(logLik = logLikFun, start =c(mu=0, sigma=1))
# max log likelihood estimation
mle = maxLik(logLik = logLikFun, start =c(mu=0, sigma=1))
# log likelihood function
logLikFun = function(param) {
mu = param[1]
sigma = param[2]
sum(dnorm(x, mean=mu, sd=sigma, log=TRUE))
}
# max log likelihood estimation
mle = maxLik(logLik = logLikFun, start =c(mu=0, sigma=1))
summary(mle)
x = seq(-3, 3, 0.1)
x
y = seq(-3, 3, 0.1)
sigma = matrix(c(2,-1,-1,2), nrow=2)
sigma
# ploting multi normal distribution
x = seq(-3, 3, 0.1)
y = seq(-3, 3, 0.1)
mu = c(0,0)
sigma = matrix(c(2,-1,-1,2), nrow=2)
sigma
dnorm(cbind(x,y),mu.sigma)
dnorm(cbind(x,y),mu,sigma)
z = outer(x,y,f)
f = function(x,y){
dnorm(cbind(x,y),mu,sigma)
}
z = outer(x,y,f)
contour(x,y,z)
z =rnorm(2)
contour(x,y,z)
z = outer(x,y,f)
f = function(x,y){
dnorm(cbind(x,y),mu,sigma)
}
f
f
f = function(x,y){
dmnorm(cbind(x,y),mu,sigma)
}
contour(x,y,z)
# generate 10 random variables with normali distribution
z =rnorm(10)
contour(x,y,z)
z = outer(x,y,f)
f = function(x,y){
dmnorm(cbind(x,y),mu,sigma)
}
library(mnormt)
f = function(x,y){
dmnorm(cbind(x,y),mu,sigma)
}
contour(x,y,z)
z = outer(x,y,f)
